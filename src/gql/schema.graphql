"""
A high precision floating point value represented as a string
"""
scalar BigFloat

"""
Boolean expression comparing fields on type "BigFloat"
"""
input BigFloatFilter {
	eq: BigFloat
	gt: BigFloat
	gte: BigFloat
	in: [BigFloat!]
	is: FilterIs
	lt: BigFloat
	lte: BigFloat
	neq: BigFloat
}

"""
An arbitrary size integer represented as a string
"""
scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
	eq: BigInt
	gt: BigInt
	gte: BigInt
	in: [BigInt!]
	is: FilterIs
	lt: BigInt
	lte: BigInt
	neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
	eq: Boolean
	is: FilterIs
}

"""
An opaque string using for tracking a position in results during pagination
"""
scalar Cursor

"""
A date wihout time information
"""
scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
	eq: Date
	gt: Date
	gte: Date
	in: [Date!]
	is: FilterIs
	lt: Date
	lte: Date
	neq: Date
}

"""
A date and time
"""
scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
	eq: Datetime
	gt: Datetime
	gte: Datetime
	in: [Datetime!]
	is: FilterIs
	lt: Datetime
	lte: Datetime
	neq: Datetime
}

type Faqs implements Node {
	content: String
	createdAt: Datetime
	id: UUID
	isHtml: Boolean

	"""
	Globally Unique Record Identifier
	"""
	nodeId: ID!
	position: Int
	title: String
	updatedAt: Datetime
}

type FaqsConnection {
	edges: [FaqsEdge!]!
	pageInfo: PageInfo!
}

type FaqsDeleteResponse {
	"""
	Count of the records impacted by the mutation
	"""
	affectedCount: Int!

	"""
	Array of records impacted by the mutation
	"""
	records: [Faqs!]!
}

type FaqsEdge {
	cursor: String!
	node: Faqs!
}

input FaqsFilter {
	content: StringFilter
	createdAt: DatetimeFilter
	id: UUIDFilter
	isHtml: BooleanFilter
	nodeId: IDFilter
	position: IntFilter
	title: StringFilter
	updatedAt: DatetimeFilter
}

input FaqsInsertInput {
	content: String
	createdAt: Datetime
	id: UUID
	isHtml: Boolean
	position: Int
	title: String
	updatedAt: Datetime
}

type FaqsInsertResponse {
	"""
	Count of the records impacted by the mutation
	"""
	affectedCount: Int!

	"""
	Array of records impacted by the mutation
	"""
	records: [Faqs!]!
}

input FaqsOrderBy {
	content: OrderByDirection
	createdAt: OrderByDirection
	id: OrderByDirection
	isHtml: OrderByDirection
	position: OrderByDirection
	title: OrderByDirection
	updatedAt: OrderByDirection
}

input FaqsUpdateInput {
	content: String
	createdAt: Datetime
	id: UUID
	isHtml: Boolean
	position: Int
	title: String
	updatedAt: Datetime
}

type FaqsUpdateResponse {
	"""
	Count of the records impacted by the mutation
	"""
	affectedCount: Int!

	"""
	Array of records impacted by the mutation
	"""
	records: [Faqs!]!
}

enum FilterIs {
	NOT_NULL
	NULL
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
	eq: Float
	gt: Float
	gte: Float
	in: [Float!]
	is: FilterIs
	lt: Float
	lte: Float
	neq: Float
}

"""
Boolean expression comparing fields on type "ID"
"""
input IDFilter {
	eq: ID
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
	eq: Int
	gt: Int
	gte: Int
	in: [Int!]
	is: FilterIs
	lt: Int
	lte: Int
	neq: Int
}

"""
A Javascript Object Notation value serialized as a string
"""
scalar JSON

"""
The root type for creating and mutating data
"""
type Mutation {
	"""
	Deletes zero or more records from the `Faqs` collection
	"""
	deleteFromFaqsCollection(
		"""
		The maximum number of records in the collection permitted to be affected
		"""
		atMost: Int! = 1

		"""
		Restricts the mutation's impact to records matching the criteria
		"""
		filter: FaqsFilter
	): FaqsDeleteResponse!

	"""
	Adds one or more `Faqs` records to the collection
	"""
	insertIntoFaqsCollection(objects: [FaqsInsertInput!]!): FaqsInsertResponse

	"""
	Updates zero or more records in the `Faqs` collection
	"""
	updateFaqsCollection(
		"""
		The maximum number of records in the collection permitted to be affected
		"""
		atMost: Int! = 1

		"""
		Restricts the mutation's impact to records matching the criteria
		"""
		filter: FaqsFilter

		"""
		Fields that are set will be updated for all records matching the `filter`
		"""
		set: FaqsUpdateInput!
	): FaqsUpdateResponse!
}

interface Node {
	"""
	Retrieves a record by `ID`
	"""
	nodeId: ID!
}

"""
Any type not handled by the type system
"""
scalar Opaque

"""
Boolean expression comparing fields on type "Opaque"
"""
input OpaqueFilter {
	eq: Opaque
	is: FilterIs
}

"""
Defines a per-field sorting order
"""
enum OrderByDirection {
	"""
	Ascending order, nulls first
	"""
	AscNullsFirst

	"""
	Ascending order, nulls last
	"""
	AscNullsLast

	"""
	Descending order, nulls first
	"""
	DescNullsFirst

	"""
	Descending order, nulls last
	"""
	DescNullsLast
}

type PageInfo {
	endCursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
	startCursor: String
}

"""
The root type for querying data
"""
type Query {
	"""
	A pagable collection of type `Faqs`
	"""
	faqsCollection(
		"""
		Query values in the collection after the provided cursor
		"""
		after: Cursor

		"""
		Query values in the collection before the provided cursor
		"""
		before: Cursor

		"""
		Filters to apply to the results set when querying from the collection
		"""
		filter: FaqsFilter

		"""
		Query the first `n` records in the collection
		"""
		first: Int

		"""
		Query the last `n` records in the collection
		"""
		last: Int

		"""
		Sort order to apply to the collection
		"""
		orderBy: [FaqsOrderBy!]
	): FaqsConnection

	"""
	Retrieve a record by its `ID`
	"""
	node(
		"""
		The record's `ID`
		"""
		nodeId: ID!
	): Node
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
	eq: String
	gt: String
	gte: String
	ilike: String
	in: [String!]
	iregex: String
	is: FilterIs
	like: String
	lt: String
	lte: String
	neq: String
	regex: String
	startsWith: String
}

"""
A time without date information
"""
scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
	eq: Time
	gt: Time
	gte: Time
	in: [Time!]
	is: FilterIs
	lt: Time
	lte: Time
	neq: Time
}

"""
A universally unique identifier
"""
scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
	eq: UUID
	in: [UUID!]
	is: FilterIs
	neq: UUID
}
